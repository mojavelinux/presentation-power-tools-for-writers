doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    title Power Tools for Writers
    link(rel='stylesheet', href='build/build.css')
  body
    article.deck
      section.title
        h1 Power Tools for Writers
        p.author Guillaume Scheibel &middot; Dan Allen
      section
        h2.fragment W.Y.S.I.W.Y.G ?
        //p.small What You See Is What You Get
        p.fragment.small You Get What You Get :/
      //section
      //  h2 Y.G.W.Y.G
      //  p.small You Get What You Get
      section
        h2 Docs <em>=</em> Code!
      section.listing
        pre.language-asciidoc: code.
          = Write Without Pain
          Author Name &lt;author@example.org&gt;

          A paragraph is just a paragraph.
          No pain involved.

          == Belgium in a nutshell

          * Beer
          * Chocolate
          * http://devoxx.be[Devoxx]
      section.listing
        pre.language-asciidoc: code.
          = Document Code Without Pain
          Author Name &lt;author@example.org&gt;

          Code is a first-class citizen!

          [source,groovy]
          ----
          println "AsciiDoc is code friendly!"
          ----

          TIP: Use the include directive to insert tested code.
      //FIXME make this an axis slide
      section(style='flex-direction: row')
        div.left(style='padding: 0 1.5em; border-right: 1px solid #eee')
          h2 Content
        div.right(style='padding: 0 1.5em')
          h2 Presentation
      section
        h2 Write in AsciiDoc, publish everywhere
        //h2 Write once, publish everywhere
      section
        table.fragment: tbody: tr
          td: div.fragment.shield
            span.icon: i.fa.fa-eye
            span.text read
          td: div.fragment.shield
            span.icon: i.fa.fa-keyboard-o
            span.text write
          td: div.fragment.shield
            span.icon: i.fa.fa-git
            span.text version
          td: div.fragment.shield
            span.icon: i.fa.fa-share-square-o
            span.text share
          td: div.fragment.shield
            span.icon: i.fa.fa-flask
            span.text publish
      //section
      //  ul(style='list-style: none; padding: 0; margin: 0')
      //    li <i class="fa fa-eye"></i> Read
      //    li <i class="fa fa-keyboard-o"></i> Edit
      //    li <i class="fa fa-git"></i> Version
      //    li <i class="fa fa-share-square-o"></i> Collaborate
      //    li <i class="fa fa-flask"></i> Publish
      section
        h2 Preview Ã  la carte
      section.poster
        img(src='images/asciidoctor-chrome-extension-install.png')
      section.poster
        img(src='images/asciidoctor-chrome-extension.png')
      section
        h2 Sharing
      section.poster
        img(src='images/docgist-screenshot.png')
      section
        h2 IDE for writers
      section
        ul(style='list-style: none; padding: 0; margin: 0; font-size: 1.5em; line-height: 2; font-weight: 300; text-align: right')
          // TODO use chared path here
          li.fragment Live preview with scroll sync
          li.fragment Outline view
          li.fragment Code assist
          li.fragment Code templates
          li.fragment Shortcuts for conversion
          li.fragment Shortcuts for publishing
          li.fragment Inbound conversion
      //section.poster
      //  a(href='http://asciidocfx.com', target='_blank'): img(src='images/asciidocfx.png')
      section.poster
        a(href='http://asciidocfx.com', target='_blank'): img(src='images/asciidocfx-screenshot-jhipster.png')
      section.poster
        img(src='images/atom-screenshot-jhipster.png')
      section.poster
        img(src='images/atom-autocomplete.png')
      section
        h2 Push to publish
      section
        h2 VCS <i class="fa fa-arrow-right"></i> CI <i class="fa fa-arrow-right"></i> Live
      // TODO use reflection here
      section
        h2 git <i class="fa fa-arrow-right"></i> Travis CI <i class="fa fa-arrow-right"></i> gh-pages
        // could also deploy to publishing platform
      section
        h2.subject Docs review
        h2.reflect Code review
      section.poster
        img(src='images/fork-and-fix.png') 
      section.poster
        img(src='images/code-diff.png')
      section.poster
        img(src='images/rich-diff.png')
      section.poster
        img(src='images/hubpress-screenshot.jpg')
      section
        h2 Code into docs via tests
      section.listing
        pre.language-groovy: code.
          void testGString() {
            // tag::gstring_1[]
            def name = 'Guillaume' // a plain string
            def greeting = "Hello ${name}"

            assert greeting.toString() == 'Hello Guillaume'
            // end::gstring_1[]
          }
      section.listing
        pre.language-asciidoc: code.
          Here, we have a string with a placeholder referencing a local variable:

          [source,groovy,indent=0]
          ----
          include::{projectdir}/src/spec/test/SyntaxTest.groovy[tag=gstring_1]
          ----
      section.poster
        img(src='images/groovy-example.png')
      section
        h2 D.R.Y. with macros
        p.small Good AsciiDoc is concise AsciiDoc
      section.listing
        pre.language-asciidoc: code.
          [source,java]
          ----
          include::{srcdir}/com/example/domain/Person.java[tag=set_name]
          ----
      section.listing
        pre.language-asciidoc: code.
          source::com.example.domain.Person.java[]
      section.listing
        pre.language-asciidoc: code.
          :source-imports: com.example.domain

          source::Person.java[]
      section.listing
        pre.language-asciidoc: code.
          :source-imports: com.example.domain

          source::Person#setName(String).java[]
      section.listing
        pre.language-asciidoc: code.
          :source-imports: com.example.domain

          source::Person#setName(String).java[opts="+apidoc,-line-comments"]
      section
        h2 Spring REST Docs
        p.small Accurate & readable documentation for RESTful services
        // intended to be an easy-to-read user guide, akin to GitHub's API documentation for example, rather than the fully automated, dense API documentation produced by tools like Swagger
      section.listing
        pre.language-java: code.
         @Test
         public void headersExample() throws Exception {
           this.document.snippets(responseHeaders(
               headerWithName("Content-Type")
                   .description("The payload MIME type")));
           this.mockMvc.perform(get("/")).andExpect(status().isOk());
         }
      section.listing
        pre.language-asciidoc: code.
          [[overview-headers]]
          == Headers

          Every response has the following header(s):

          include::{snippets}/headers-example/response-headers.adoc[] 
      section
        h2 Asciidoclet
        p.small AsciiDoc in Javadoc
      section.listing
        pre.language-java: code.
          /**
           * &lt;p&gt;Sample comments that include {@code source code}.&lt;/p&gt;
           * &lt;pre&gt;{@code
           * public class Asciidoclet extends Doclet {
           *     {@literal @}SuppressWarnings("UnusedDeclaration")
           *     public static boolean start(RootDoc rootDoc) {
           *         new Asciidoclet().render(rootDoc);
           *         return Standard.start(rootDoc);
           *     }
           * }
           * }&gt;/pre&gt;
           *
           * @author &lt;a href="https://github.com/johncarl81"&gt;John Ericksen&lt;/a&gt;
           */
          public class Asciidoclet extends Doclet { ... }
      section.listing
        pre.language-java: code.
          /**
           * Sample comments that include `source code`.
           *
           * [source,java]
           * public class Asciidoclet extends Doclet {
           *     @SuppressWarnings("UnusedDeclaration")
           *     public static boolean start(RootDoc rootDoc) {
           *         new Asciidoclet().render(rootDoc);
           *         return Standard.start(rootDoc);
           *     }
           * }
           *
           * @author https://github.com/johncarl81[John Ericksen]
           */
          public class Asciidoclet extends Doclet { ... }
      section.listing
        pre: code.
          /**
           * Defines an interface as a Transfuse Factory.
           *
           * .Example
           * [source,java]
           * @Factory
           * public interface FactoryExample {
           *     BuildMe build();
           * }
           *
           * @author John Ericksen
           */
          @Target(ElementType.TYPE)
          @Retention(RetentionPolicy.RUNTIME)
          public @interface Factory {} 
      section.poster
        a(href='https://oss.sonatype.org/service/local/repositories/releases/archive/org/asciidoctor/asciidoclet/1.5.2/asciidoclet-1.5.2-javadoc.jar/!/org/asciidoctor/Asciidoclet.html'): img(src='images/asciidoclet-published.png')
      section
        h2 Asciidoctor Diagram
        p.small Diagrams from plain text
      section.listing
        pre: code.
          [plantuml, format=svg, alt="Usage"]
          ....
          User -> (Start)
          User --> (Use the application) : Label
          
          :Main Admin: ---> (Use the application) : Another label
          ....
      section(style='background-color: #fff')
        img(src='images/asciidoctor-diagram-sample.svg')
      section.fin
        h2 Write with power!
    script(src='build/build.js')
